/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"*{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid-template-columns: minmax(130px, 180px) 1fr;\n    grid-template-rows: 60px 1fr;\n}\n\nheader{\n    grid-column: 1/3;\n    grid-row: 1/2;\n    background-color: rgba(76, 76, 130, 0.596);\n}\n\nmain{\n    grid-column: 2/3;\n    grid-row: 2/3;\n    background-color: rgba(130, 80, 80, 0.511);\n}\n\naside{\n    background-color: rgba(114, 195, 114, 0.567);\n    grid-column: 1/2;\n    grid-row: 2/3;\n}\n.note{\n border: 5px dashed black;\n font-size: 1.5rem;\n border-radius: 10px;\n padding: 15px;\n margin:10px;\n}\n\n#dialog{\n    position: absolute;\n    height: 200px;\n    width: 400px;\n    top: 250px;\n    left: 550px;\n    padding: 30px;\n\n\n}\n\n#dialog::backdrop{\n    background: rgba(0, 0, 0, 0.696);\n}\n\n.projects{\n    margin-left: 10px;\n    /* height: 100%; */\n}\n.project_list{\n    /* height: 100%; */\n}\n.project_input{\n    cursor: pointer;\n}\n\n.active_project{\n    background-color: rgb(169, 65, 65);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,+CAA+C;IAC/C,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,4CAA4C;IAC5C,gBAAgB;IAChB,aAAa;AACjB;AACA;CACC,wBAAwB;CACxB,iBAAiB;CACjB,mBAAmB;CACnB,aAAa;CACb,WAAW;AACZ;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,YAAY;IACZ,UAAU;IACV,WAAW;IACX,aAAa;;;AAGjB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:["*{\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.container{\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: grid;\r\n    grid-template-columns: minmax(130px, 180px) 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\nheader{\r\n    grid-column: 1/3;\r\n    grid-row: 1/2;\r\n    background-color: rgba(76, 76, 130, 0.596);\r\n}\r\n\r\nmain{\r\n    grid-column: 2/3;\r\n    grid-row: 2/3;\r\n    background-color: rgba(130, 80, 80, 0.511);\r\n}\r\n\r\naside{\r\n    background-color: rgba(114, 195, 114, 0.567);\r\n    grid-column: 1/2;\r\n    grid-row: 2/3;\r\n}\r\n.note{\r\n border: 5px dashed black;\r\n font-size: 1.5rem;\r\n border-radius: 10px;\r\n padding: 15px;\r\n margin:10px;\r\n}\r\n\r\n#dialog{\r\n    position: absolute;\r\n    height: 200px;\r\n    width: 400px;\r\n    top: 250px;\r\n    left: 550px;\r\n    padding: 30px;\r\n\r\n\r\n}\r\n\r\n#dialog::backdrop{\r\n    background: rgba(0, 0, 0, 0.696);\r\n}\r\n\r\n.projects{\r\n    margin-left: 10px;\r\n    /* height: 100%; */\r\n}\r\n.project_list{\r\n    /* height: 100%; */\r\n}\r\n.project_input{\r\n    cursor: pointer;\r\n}\r\n\r\n.active_project{\r\n    background-color: rgb(169, 65, 65);\r\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);n&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=n.base?s[0]+n.base:s[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=r(p),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var g=o(A,n);n.byIndex=c,t.splice(c,0,{identifier:p,updater:g,references:1})}i.push(p)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);t[c].references--}for(var s=n(e,o),l=0;l<a.length;l++){var d=r(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),n=r(795),o=r.n(n),a=r(569),i=r.n(a),c=r(565),s=r.n(c),l=r(216),d=r.n(l),p=r(589),u=r.n(p),A=r(426),g={};g.styleTagTransform=u(),g.setAttributes=s(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),t()(A.Z,g),A.Z&&A.Z.locals&&A.Z.locals;const m=function(e){const t=document.querySelector(".todos");t.innerHTML="",localStorage.getItem("curProject")&&JSON.parse(localStorage.getItem("curProject")).forEach((e=>{let r=document.createElement("div");r.innerHTML=`\n        <div class="note_title">title: ${e.title}</div>\n        <div class="note_priority">priority: ${e.priority}</div>\n        <div class="note_description"> desc: ${e.description}</div>\n        <div class="note_date">date: ${e.dueDate}</div>\n        `,r.classList.add("note"),t.appendChild(r),localStorage.getItem("projects")}))},f=class{constructor(e,t,r,n){this.title=e,this.description=t,this.dueDate=r,this.priority=n}editTitle(e){this.title=e}editPriority(e){this.priority=e}editDescription(e){this.description=e}editDate(e){this.dueDate=e}},v=function(){const e=document.querySelector(".project_list");e.innerHTML="",localStorage.getItem("projectList")&&JSON.parse(localStorage.getItem("projectList")).forEach((t=>{const r=document.createElement("li");r.classList.add("project_list_item"),r.addEventListener("click",(e=>{var t;t=e.target,document.querySelectorAll(".project_list_item").forEach((e=>{e==t?e.classList.add("active_project"):e.classList.remove("active_project")}))})),r.innerHTML=`\n              <input class='project_input' value=${t} placeholder="type name of project" type="text">\n            <button class='edit_project_btn'>edit</button>\n            <button class='delete_project_btn'>delete</button>\n        `,e.appendChild(r),document.querySelectorAll(".delete_project_btn").forEach((e=>{e.addEventListener("click",(e=>{let t=e.target.previousElementSibling.previousElementSibling.value;localStorage.removeItem(`${t}`);let r=JSON.parse(localStorage.getItem("projectList")),n=r.filter((e=>e!==t));localStorage.setItem("projectList",JSON.stringify(n)),e.target.parentElement.remove(),console.log(r)}))}))}))};(function(){const e=document.getElementById("dialog"),t=document.querySelector(".dialog_btn_create"),r=document.querySelector(".add_todo"),n=document.querySelector(".dialog_content");r.onclick=()=>{e.showModal()},t.addEventListener("click",(e=>{(function(e,t,r,n){const o=new f(e,t,r,n);let a,i=[];localStorage.getItem("curProject")&&(a=localStorage.getItem("curProject"),i=JSON.parse(a)),i.push(o),localStorage.setItem("curProject",JSON.stringify(i)),m()})(document.querySelector(".dialog_title").value,document.querySelector(".dialog_description").value,document.querySelector(".dialog_priority").value,document.querySelector(".dialog_date").value),n.reset()})),document.querySelector(".project_list");const o=document.querySelector(".project-creator");o.addEventListener("keypress",(e=>{13===(e.which||e.keyCode)&&(function(e){let t,r=[];localStorage.getItem("projectList")&&(t=localStorage.getItem("projectList"),r=JSON.parse(t)),r.push(e),localStorage.setItem(`${e}`,JSON.stringify([])),localStorage.setItem("projectList",JSON.stringify(r))}(o.value),o.value="",v())}))})(),m(),v()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG8vLi9zcmMvZnVuY3Rpb25zL2NyZWF0ZVByb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9mdW5jdGlvbnMvcmVuZGVyLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvVG9kby5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2Z1bmN0aW9ucy9yZW5kZXJQcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvZnVuY3Rpb25zL2NoZWNrQWN0aXZlUHIuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9mdW5jdGlvbnMvbWFuYWdlRG9tLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvZnVuY3Rpb25zL2NyZWF0ZVRvZG8uanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKntcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbn1cclxuXHJcbi5jb250YWluZXJ7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgd2lkdGg6IDEwMHZ3O1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWlubWF4KDEzMHB4LCAxODBweCkgMWZyO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2MHB4IDFmcjtcclxufVxyXG5cclxuaGVhZGVye1xyXG4gICAgZ3JpZC1jb2x1bW46IDEvMztcclxuICAgIGdyaWQtcm93OiAxLzI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDc2LCA3NiwgMTMwLCAwLjU5Nik7XHJcbn1cclxuXHJcbm1haW57XHJcbiAgICBncmlkLWNvbHVtbjogMi8zO1xyXG4gICAgZ3JpZC1yb3c6IDIvMztcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTMwLCA4MCwgODAsIDAuNTExKTtcclxufVxyXG5cclxuYXNpZGV7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExNCwgMTk1LCAxMTQsIDAuNTY3KTtcclxuICAgIGdyaWQtY29sdW1uOiAxLzI7XHJcbiAgICBncmlkLXJvdzogMi8zO1xyXG59XHJcbi5ub3Rle1xyXG4gYm9yZGVyOiA1cHggZGFzaGVkIGJsYWNrO1xyXG4gZm9udC1zaXplOiAxLjVyZW07XHJcbiBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gcGFkZGluZzogMTVweDtcclxuIG1hcmdpbjoxMHB4O1xyXG59XHJcblxyXG4jZGlhbG9ne1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgaGVpZ2h0OiAyMDBweDtcclxuICAgIHdpZHRoOiA0MDBweDtcclxuICAgIHRvcDogMjUwcHg7XHJcbiAgICBsZWZ0OiA1NTBweDtcclxuICAgIHBhZGRpbmc6IDMwcHg7XHJcblxyXG5cclxufVxyXG5cclxuI2RpYWxvZzo6YmFja2Ryb3B7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNjk2KTtcclxufVxyXG5cclxuLnByb2plY3Rze1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgICAvKiBoZWlnaHQ6IDEwMCU7ICovXHJcbn1cclxuLnByb2plY3RfbGlzdHtcclxuICAgIC8qIGhlaWdodDogMTAwJTsgKi9cclxufVxyXG4ucHJvamVjdF9pbnB1dHtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG5cclxuLmFjdGl2ZV9wcm9qZWN0e1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE2OSwgNjUsIDY1KTtcclxufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsWUFBWTtJQUNaLGFBQWE7SUFDYiwrQ0FBK0M7SUFDL0MsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYiwwQ0FBMEM7QUFDOUM7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLDBDQUEwQztBQUM5Qzs7QUFFQTtJQUNJLDRDQUE0QztJQUM1QyxnQkFBZ0I7SUFDaEIsYUFBYTtBQUNqQjtBQUNBO0NBQ0Msd0JBQXdCO0NBQ3hCLGlCQUFpQjtDQUNqQixtQkFBbUI7Q0FDbkIsYUFBYTtDQUNiLFdBQVc7QUFDWjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsWUFBWTtJQUNaLFVBQVU7SUFDVixXQUFXO0lBQ1gsYUFBYTs7O0FBR2pCOztBQUVBO0lBQ0ksZ0NBQWdDO0FBQ3BDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksa0JBQWtCO0FBQ3RCO0FBQ0E7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksa0NBQWtDO0FBQ3RDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIip7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbnRhaW5lcntcXHJcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgd2lkdGg6IDEwMHZ3O1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgxMzBweCwgMTgwcHgpIDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2MHB4IDFmcjtcXHJcXG59XFxyXFxuXFxyXFxuaGVhZGVye1xcclxcbiAgICBncmlkLWNvbHVtbjogMS8zO1xcclxcbiAgICBncmlkLXJvdzogMS8yO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDc2LCA3NiwgMTMwLCAwLjU5Nik7XFxyXFxufVxcclxcblxcclxcbm1haW57XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyLzM7XFxyXFxuICAgIGdyaWQtcm93OiAyLzM7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTMwLCA4MCwgODAsIDAuNTExKTtcXHJcXG59XFxyXFxuXFxyXFxuYXNpZGV7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTE0LCAxOTUsIDExNCwgMC41NjcpO1xcclxcbiAgICBncmlkLWNvbHVtbjogMS8yO1xcclxcbiAgICBncmlkLXJvdzogMi8zO1xcclxcbn1cXHJcXG4ubm90ZXtcXHJcXG4gYm9yZGVyOiA1cHggZGFzaGVkIGJsYWNrO1xcclxcbiBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gcGFkZGluZzogMTVweDtcXHJcXG4gbWFyZ2luOjEwcHg7XFxyXFxufVxcclxcblxcclxcbiNkaWFsb2d7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgaGVpZ2h0OiAyMDBweDtcXHJcXG4gICAgd2lkdGg6IDQwMHB4O1xcclxcbiAgICB0b3A6IDI1MHB4O1xcclxcbiAgICBsZWZ0OiA1NTBweDtcXHJcXG4gICAgcGFkZGluZzogMzBweDtcXHJcXG5cXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuI2RpYWxvZzo6YmFja2Ryb3B7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC42OTYpO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdHN7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcclxcbiAgICAvKiBoZWlnaHQ6IDEwMCU7ICovXFxyXFxufVxcclxcbi5wcm9qZWN0X2xpc3R7XFxyXFxuICAgIC8qIGhlaWdodDogMTAwJTsgKi9cXHJcXG59XFxyXFxuLnByb2plY3RfaW5wdXR7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmFjdGl2ZV9wcm9qZWN0e1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTY5LCA2NSwgNjUpO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHJlbmRlciBmcm9tICcuL3JlbmRlcic7XHJcbmltcG9ydCBUb2RvIGZyb20gJy4uL1RvZG8nO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdCh0aXRsZSkge1xyXG4gIGxldCBwcmV2U3RhdGUgO1xyXG4gIGxldCBwcm9qZWN0TGlzdCA9IFtdO1xyXG5cclxuIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0TGlzdCcpKXtcclxuXHJcbiAgIHByZXZTdGF0ZSA9ICBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdExpc3QnKTtcclxuICAgcHJvamVjdExpc3QgPSBKU09OLnBhcnNlKHByZXZTdGF0ZSlcclxuIH1cclxuICBcclxuXHJcbiAgcHJvamVjdExpc3QucHVzaCh0aXRsZSk7XHJcblxyXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke3RpdGxlfWAsIEpTT04uc3RyaW5naWZ5KFtdKSk7XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RMaXN0JywgSlNPTi5zdHJpbmdpZnkocHJvamVjdExpc3QpKTtcclxuXHJcbi8vICByZW5kZXIoKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb2plY3QiLCIvLyBpbXBvcnQgc3RvcmUgZnJvbSBcIi4vc3RvcmVcIlxyXG5cclxuZnVuY3Rpb24gcmVuZGVyKGN1clByb2plY3Qpe1xyXG5cclxuIFxyXG4gICAgICAgIGNvbnN0IHRvZG9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG9zJyk7XHJcbiAgICAgICAgdG9kb3MuaW5uZXJIVE1MID0gJyc7XHJcbiAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2N1clByb2plY3QnKSl7XHJcbiAgICBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjdXJQcm9qZWN0JykpLmZvckVhY2goKGkpID0+e1xyXG4gICAgICAgIGxldCBub3RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbm90ZS5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGVfdGl0bGVcIj50aXRsZTogJHtpLnRpdGxlfTwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJub3RlX3ByaW9yaXR5XCI+cHJpb3JpdHk6ICR7aS5wcmlvcml0eX08L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZV9kZXNjcmlwdGlvblwiPiBkZXNjOiAke2kuZGVzY3JpcHRpb259PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGVfZGF0ZVwiPmRhdGU6ICR7aS5kdWVEYXRlfTwvZGl2PlxyXG4gICAgICAgIGBcclxuICAgICAgICBub3RlLmNsYXNzTGlzdC5hZGQoJ25vdGUnKVxyXG4gICAgICAgIHRvZG9zLmFwcGVuZENoaWxkKG5vdGUpXHJcbiAgICAgICAgXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RzJylcclxuICAgICAgICBcclxuICAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICB9XHJcbiAgICApfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZW5kZXIiLCJcclxuXHJcbmNsYXNzIFRvZG97XHJcbiAgICBcclxuY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSl7XHJcbiAgICB0aGlzLnRpdGxlID0gdGl0bGU7IFxyXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcclxuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcclxufVxyXG5cclxuXHJcbmVkaXRUaXRsZSh2YWx1ZSl7XHJcbiAgICB0aGlzLnRpdGxlID0gdmFsdWU7XHJcbn1cclxuZWRpdFByaW9yaXR5KHZhbHVlKXtcclxuICAgIHRoaXMucHJpb3JpdHkgPSB2YWx1ZTtcclxufVxyXG5lZGl0RGVzY3JpcHRpb24odmFsdWUpe1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IHZhbHVlO1xyXG59XHJcbmVkaXREYXRlKHZhbHVlKXtcclxuICAgIHRoaXMuZHVlRGF0ZSA9IHZhbHVlO1xyXG59XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb2RvIiwiaW1wb3J0IGNoZWNrQWN0aXZlUHJvamVjdCBmcm9tICcuL2NoZWNrQWN0aXZlUHInO1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyUHJvamVjdCgpIHtcclxuICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0X2xpc3QnKTtcclxuICBwcm9qZWN0TGlzdC5pbm5lckhUTUwgPSAnJ1xyXG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdExpc3QnKSkge1xyXG4gICAgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdExpc3QnKSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBjb25zdCBuZXdQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgbmV3UHJvamVjdC5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0X2xpc3RfaXRlbScpO1xyXG4gICAgICBuZXdQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBjaGVja0FjdGl2ZVByb2plY3QoZS50YXJnZXQpO1xyXG4gICAgICB9KTtcclxuICAgICAgbmV3UHJvamVjdC5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdwcm9qZWN0X2lucHV0JyB2YWx1ZT0ke2l0ZW19IHBsYWNlaG9sZGVyPVwidHlwZSBuYW1lIG9mIHByb2plY3RcIiB0eXBlPVwidGV4dFwiPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdlZGl0X3Byb2plY3RfYnRuJz5lZGl0PC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2RlbGV0ZV9wcm9qZWN0X2J0bic+ZGVsZXRlPC9idXR0b24+XHJcbiAgICAgICAgYDtcclxuICAgICAgcHJvamVjdExpc3QuYXBwZW5kQ2hpbGQobmV3UHJvamVjdCk7XHJcbiAgICAgIGNvbnN0IGRlbGV0ZVByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGVsZXRlX3Byb2plY3RfYnRuJyk7XHJcbiAgICAgIGRlbGV0ZVByb2plY3RCdG4uZm9yRWFjaCgoaSkgPT4ge1xyXG4gICAgICAgIGkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgbGV0IGN1ciA9IGUudGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZy52YWx1ZTtcclxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGAke2N1cn1gKTtcclxuICAgICAgICAgIGxldCBjdXJTdGF0ZVByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdExpc3QnKSk7XHJcbiAgICAgICAgICBsZXQgcmVzdWx0TGlzdFByb2plY3QgPSBjdXJTdGF0ZVByb2plY3RzLmZpbHRlcigoaSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaSAhPT0gY3VyO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdExpc3QnLCBKU09OLnN0cmluZ2lmeShyZXN1bHRMaXN0UHJvamVjdCkpO1xyXG4gICAgICAgICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGN1clN0YXRlUHJvamVjdHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gY29uc3QgbmV3UHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgLy8gbmV3UHJvamVjdC5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0X2xpc3RfaXRlbScpO1xyXG4gIC8vIG5ld1Byb2plY3QuaW5uZXJIVE1MID0gYFxyXG4gIC8vICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSdwcm9qZWN0X2lucHV0JyB2YWx1ZT0ke3Byb2plY3RDcmVhdG9yLnZhbHVlfSBwbGFjZWhvbGRlcj1cInR5cGUgbmFtZSBvZiBwcm9qZWN0XCIgdHlwZT1cInRleHRcIj5cclxuICAvLyAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2VkaXRfcHJvamVjdF9idG4nPmVkaXQ8L2J1dHRvbj5cclxuICAvLyAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2RlbGV0ZV9wcm9qZWN0X2J0bic+ZGVsZXRlPC9idXR0b24+XHJcbiAgLy8gICAgICBgO1xyXG5cclxuICAvLyBwcm9qZWN0TGlzdC5hcHBlbmRDaGlsZChuZXdQcm9qZWN0KTtcclxuICAvLyBjcmVhdGVQcm9qZWN0KHByb2plY3RDcmVhdG9yLnZhbHVlKTtcclxuICAvLyBwcm9qZWN0Q3JlYXRvci52YWx1ZSA9ICcnO1xyXG4gIC8vIHByb2plY3RDcmVhdG9yLmJsdXIoKTtcclxuICAvLyBjb25zdCBwcm9qZWN0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdF9pbnB1dCcpO1xyXG4gIC8vIHByb2plY3RJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKT0+e1xyXG4gIC8vICAgZS50YXJnZXQuYmx1cigpXHJcbiAgLy8gfSlcclxuICAvLyBjb25zdCBkZWxldGVQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGV0ZV9wcm9qZWN0X2J0bicpO1xyXG4gIC8vIGNvbnN0IGVkaXRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXRfcHJvamVjdF9idG4nKTtcclxuICAvLyBkZWxldGVQcm9qZWN0QnRuLmZvckVhY2goKGkpPT57XHJcbiAgLy8gICBpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAvLyAgIGNvbnNvbGUubG9nKGUudGFyZ2V0LnByZXZpb3VzRWxlbWVudFNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZy52YWx1ZSk7XHJcbiAgLy8gICBsZXQgY3VyID0gZS50YXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLnZhbHVlO1xyXG4gIC8vICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYCR7Y3VyfWApO1xyXG4gIC8vICAgY29uc29sZS5sb2coJ3BhcmVudDonLGUudGFyZ2V0LnBhcmVudEVsZW1lbnQpXHJcbiAgLy8gICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpXHJcbiAgLy8gfSlcclxuICAvLyB9KVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IHJlbmRlclByb2plY3Q7XHJcbiIsIlxyXG5mdW5jdGlvbiBjaGVja0FjdGl2ZVByb2plY3QoY2hhcil7XHJcbiAgICBjb25zdCBwcm9qZWN0TGlzdEFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0X2xpc3RfaXRlbScpO1xyXG4gICAgcHJvamVjdExpc3RBY3RpdmUuZm9yRWFjaCgoaXRlbSk9PntcclxuICBcclxuICAgICAgICAgICAgaXRlbSA9PSBjaGFyIFxyXG4gICAgICAgICAgICA/IGl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlX3Byb2plY3QnKVxyXG4gICAgICAgICAgICA6IGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlX3Byb2plY3QnKVxyXG4gICAgICAgICAgICBpdGVtID09IGNoYXIgXHJcbiAgICAgICAgICAgIFxyXG4gICAgfSlcclxuICAgIC8vIHByb2plY3RMaXN0QWN0aXZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpPT57XHJcbiAgICAvLyAgICAgcHJvamVjdExpc3RBY3RpdmUuZm9yRWFjaCgoaXRlbSk9PntcclxuICAgIC8vICAgICAgICAgaXRlbSA9PT0gZS50YXJnZXQgPyBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKSA6IGZhbHNlXHJcbiAgICAvLyAgICAgIH0pXHJcbiAgICAvLyAgfVxyXG4gICAgLy8gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tBY3RpdmVQcm9qZWN0IiwiaW1wb3J0IGNoZWNrQWN0aXZlUHJvamVjdCBmcm9tICcuL2NoZWNrQWN0aXZlUHInO1xyXG5pbXBvcnQgY3JlYXRlUHJvamVjdCBmcm9tICcuL2NyZWF0ZVByb2plY3QnO1xyXG5pbXBvcnQgY3JlYXRlVG9kbyBmcm9tICcuL2NyZWF0ZVRvZG8nO1xyXG5pbXBvcnQgcmVuZGVyUHJvamVjdCBmcm9tICcuL3JlbmRlclByb2plY3QnO1xyXG5cclxuZnVuY3Rpb24gbWFuYWdlRG9tKCkge1xyXG4gIC8vISBBQk9VVCBESUFMT0dcclxuXHJcbiAgY29uc3QgZGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpYWxvZycpO1xyXG4gIGNvbnN0IGRpYWxvZ0FkZFRvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX2J0bl9jcmVhdGUnKTtcclxuICBjb25zdCBidG5PcGVuRGlhbG9nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZF90b2RvJyk7XHJcbiAgY29uc3QgZGlhbG9nX2Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX2NvbnRlbnQnKTtcclxuXHJcbiAgYnRuT3BlbkRpYWxvZy5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgZGlhbG9nLnNob3dNb2RhbCgpO1xyXG4gIH07XHJcblxyXG4gIGRpYWxvZ0FkZFRvZG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgY29uc3QgZFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRpYWxvZ190aXRsZScpLnZhbHVlO1xyXG4gICAgY29uc3QgZERlc2MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX2Rlc2NyaXB0aW9uJykudmFsdWU7XHJcbiAgICBjb25zdCBkUHJpb3JpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX3ByaW9yaXR5JykudmFsdWU7XHJcbiAgICBjb25zdCBkRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaWFsb2dfZGF0ZScpLnZhbHVlO1xyXG4gICAgY3JlYXRlVG9kbyhkVGl0bGUsIGREZXNjLCBkUHJpb3JpdHksIGREYXRlKTtcclxuICAgIGRpYWxvZ19mb3JtLnJlc2V0KCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vISBBQk9VVCBQUk9KRUNUU1xyXG5cclxuICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0X2xpc3QnKTtcclxuICBjb25zdCBwcm9qZWN0Q3JlYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWNyZWF0b3InKTtcclxuXHJcbiAgcHJvamVjdENyZWF0b3IuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xyXG4gICAgbGV0IGtleSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xyXG4gICAgaWYgKGtleSA9PT0gMTMpIHtcclxuICAgICAgLy8g0LrQvtC0INC60LvQsNCy0LjRiNC4IEVudGVyXHJcbiAgICAgIGNyZWF0ZVByb2plY3QocHJvamVjdENyZWF0b3IudmFsdWUpO1xyXG4gICAgICBwcm9qZWN0Q3JlYXRvci52YWx1ZSA9ICcnXHJcbiAgICAgIHJlbmRlclByb2plY3QoKVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtYW5hZ2VEb207XHJcbiIsImltcG9ydCByZW5kZXIgZnJvbSAnLi9yZW5kZXInO1xyXG5pbXBvcnQgVG9kbyBmcm9tICcuLi9Ub2RvJztcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVRvZG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xyXG4gIGNvbnN0IHRvZG8gPSBuZXcgVG9kbyh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KTtcclxuICBsZXQgcHJldlN0YXRlIDtcclxuICBsZXQgcHJvamVjdEFycmF5ID0gW107XHJcblxyXG4gaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2N1clByb2plY3QnKSl7XHJcblxyXG4gICBwcmV2U3RhdGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY3VyUHJvamVjdCcpXHJcbiAgIHByb2plY3RBcnJheSA9IEpTT04ucGFyc2UocHJldlN0YXRlKVxyXG4gfVxyXG4gIFxyXG5cclxuICBwcm9qZWN0QXJyYXkucHVzaCh0b2RvKTtcclxuXHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2N1clByb2plY3QnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0QXJyYXkpKTtcclxuXHJcbiByZW5kZXIoKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRvZG8iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJ1xyXG5pbXBvcnQgbWFuYWdlRG9tIGZyb20gJy4vZnVuY3Rpb25zL21hbmFnZURvbSdcclxuaW1wb3J0IGNyZWF0ZVByb2plY3QgZnJvbSAnLi9mdW5jdGlvbnMvY3JlYXRlUHJvamVjdCdcclxuaW1wb3J0IHJlbmRlciBmcm9tICcuL2Z1bmN0aW9ucy9yZW5kZXInXHJcbmltcG9ydCByZW5kZXJQcm9qZWN0IGZyb20gJy4vZnVuY3Rpb25zL3JlbmRlclByb2plY3QnXHJcblxyXG5cclxubWFuYWdlRG9tKClcclxucmVuZGVyKClcclxucmVuZGVyUHJvamVjdCgpXHJcbi8vIGNyZWF0ZVByb2plY3QoJ2N1clByb2plY3QnKSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJsb2NhbHMiLCJjdXJQcm9qZWN0IiwidG9kb3MiLCJpbm5lckhUTUwiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2UiLCJmb3JFYWNoIiwibm90ZSIsInRpdGxlIiwicHJpb3JpdHkiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb25zdHJ1Y3RvciIsImVkaXRUaXRsZSIsInZhbHVlIiwiZWRpdFByaW9yaXR5IiwiZWRpdERlc2NyaXB0aW9uIiwiZWRpdERhdGUiLCJwcm9qZWN0TGlzdCIsIm5ld1Byb2plY3QiLCJhZGRFdmVudExpc3RlbmVyIiwiY2hhciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjdXIiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicmVtb3ZlSXRlbSIsImN1clN0YXRlUHJvamVjdHMiLCJyZXN1bHRMaXN0UHJvamVjdCIsImZpbHRlciIsInNldEl0ZW0iLCJwYXJlbnRFbGVtZW50IiwiY29uc29sZSIsImxvZyIsImRpYWxvZyIsImdldEVsZW1lbnRCeUlkIiwiZGlhbG9nQWRkVG9kbyIsImJ0bk9wZW5EaWFsb2ciLCJkaWFsb2dfZm9ybSIsIm9uY2xpY2siLCJzaG93TW9kYWwiLCJ0b2RvIiwicHJldlN0YXRlIiwicHJvamVjdEFycmF5IiwicmVzZXQiLCJwcm9qZWN0Q3JlYXRvciIsIndoaWNoIiwia2V5Q29kZSJdLCJzb3VyY2VSb290IjoiIn0=