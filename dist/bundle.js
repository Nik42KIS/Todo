/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"*{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid-template-columns: minmax(130px, 180px) 1fr;\n    grid-template-rows: 60px 1fr;\n}\n\nheader{\n    grid-column: 1/3;\n    grid-row: 1/2;\n    background-color: rgba(76, 76, 130, 0.596);\n}\n\nmain{\n    grid-column: 2/3;\n    grid-row: 2/3;\n    background-color: rgba(130, 80, 80, 0.511);\n}\n\naside{\n    background-color: rgba(114, 195, 114, 0.567);\n    grid-column: 1/2;\n    grid-row: 2/3;\n}\n.note{\n border: 5px dashed black;\n font-size: 1.5rem;\n border-radius: 10px;\n padding: 15px;\n margin:10px;\n}\n\n#dialog{\n    position: absolute;\n    height: 200px;\n    width: 400px;\n    top: 250px;\n    left: 550px;\n    padding: 30px;\n\n\n}\n\n#dialog::backdrop{\n    background: rgba(0, 0, 0, 0.696);\n}\n\n.projects{\n    margin-left: 10px;\n    /* height: 100%; */\n}\n.project_list{\n    /* height: 100%; */\n}\n.project_input{\n    cursor: pointer;\n}\n\n.active_project{\n    background-color: rgb(169, 65, 65);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,+CAA+C;IAC/C,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,0CAA0C;AAC9C;;AAEA;IACI,4CAA4C;IAC5C,gBAAgB;IAChB,aAAa;AACjB;AACA;CACC,wBAAwB;CACxB,iBAAiB;CACjB,mBAAmB;CACnB,aAAa;CACb,WAAW;AACZ;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,YAAY;IACZ,UAAU;IACV,WAAW;IACX,aAAa;;;AAGjB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:["*{\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.container{\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: grid;\r\n    grid-template-columns: minmax(130px, 180px) 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\nheader{\r\n    grid-column: 1/3;\r\n    grid-row: 1/2;\r\n    background-color: rgba(76, 76, 130, 0.596);\r\n}\r\n\r\nmain{\r\n    grid-column: 2/3;\r\n    grid-row: 2/3;\r\n    background-color: rgba(130, 80, 80, 0.511);\r\n}\r\n\r\naside{\r\n    background-color: rgba(114, 195, 114, 0.567);\r\n    grid-column: 1/2;\r\n    grid-row: 2/3;\r\n}\r\n.note{\r\n border: 5px dashed black;\r\n font-size: 1.5rem;\r\n border-radius: 10px;\r\n padding: 15px;\r\n margin:10px;\r\n}\r\n\r\n#dialog{\r\n    position: absolute;\r\n    height: 200px;\r\n    width: 400px;\r\n    top: 250px;\r\n    left: 550px;\r\n    padding: 30px;\r\n\r\n\r\n}\r\n\r\n#dialog::backdrop{\r\n    background: rgba(0, 0, 0, 0.696);\r\n}\r\n\r\n.projects{\r\n    margin-left: 10px;\r\n    /* height: 100%; */\r\n}\r\n.project_list{\r\n    /* height: 100%; */\r\n}\r\n.project_input{\r\n    cursor: pointer;\r\n}\r\n\r\n.active_project{\r\n    background-color: rgb(169, 65, 65);\r\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);n&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=n.base?s[0]+n.base:s[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=r(p),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var g=o(A,n);n.byIndex=c,t.splice(c,0,{identifier:p,updater:g,references:1})}i.push(p)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);t[c].references--}for(var s=n(e,o),l=0;l<a.length;l++){var d=r(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),n=r(795),o=r.n(n),a=r(569),i=r.n(a),c=r(565),s=r.n(c),l=r(216),d=r.n(l),p=r(589),u=r.n(p),A=r(426),g={};g.styleTagTransform=u(),g.setAttributes=s(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d(),t()(A.Z,g),A.Z&&A.Z.locals&&A.Z.locals;const m=function(e){const t=document.querySelector(".todos");t.innerHTML="",localStorage.getItem("curProject")&&JSON.parse(localStorage.getItem("curProject")).forEach((e=>{let r=document.createElement("div");r.innerHTML=`\n        <div class="note_title">title: ${e.title}</div>\n        <div class="note_priority">priority: ${e.priority}</div>\n        <div class="note_description"> desc: ${e.description}</div>\n        <div class="note_date">date: ${e.dueDate}</div>\n        `,r.classList.add("note"),t.appendChild(r),localStorage.getItem("projects")}))},f=class{constructor(e,t,r,n){this.title=e,this.description=t,this.dueDate=r,this.priority=n}editTitle(e){this.title=e}editPriority(e){this.priority=e}editDescription(e){this.description=e}editDate(e){this.dueDate=e}},v=function(){const e=document.querySelector(".project_list");e.innerHTML="",localStorage.getItem("projectList")&&JSON.parse(localStorage.getItem("projectList")).forEach((t=>{const r=document.createElement("li");r.classList.add("project_list_item"),r.addEventListener("click",(e=>{var t;t=e.target,document.querySelectorAll(".project_list_item").forEach((e=>{e==t?t.classList.add("active_project"):t.classList.remove("active_project")}))})),r.innerHTML=`\n              <input class='project_input' value=${t} placeholder="type name of project" type="text">\n            <button class='edit_project_btn'>edit</button>\n            <button class='delete_project_btn'>delete</button>\n        `,e.appendChild(r),document.querySelectorAll(".delete_project_btn").forEach((e=>{e.addEventListener("click",(e=>{let t=e.target.previousElementSibling.previousElementSibling.value;localStorage.removeItem(`${t}`);let r=JSON.parse(localStorage.getItem("projectList")),n=r.filter((e=>e!==t));localStorage.setItem("projectList",JSON.stringify(n)),e.target.parentElement.remove(),console.log(r)}))}))}))};(function(){const e=document.getElementById("dialog"),t=document.querySelector(".dialog_btn_create"),r=document.querySelector(".add_todo"),n=document.querySelector(".dialog_content");r.onclick=()=>{e.showModal()},t.addEventListener("click",(e=>{(function(e,t,r,n){const o=new f(e,t,r,n);let a,i=[];localStorage.getItem("curProject")&&(a=localStorage.getItem("curProject"),i=JSON.parse(a)),i.push(o),localStorage.setItem("curProject",JSON.stringify(i)),m()})(document.querySelector(".dialog_title").value,document.querySelector(".dialog_description").value,document.querySelector(".dialog_priority").value,document.querySelector(".dialog_date").value),n.reset()})),document.querySelector(".project_list");const o=document.querySelector(".project-creator");o.addEventListener("keypress",(e=>{13===(e.which||e.keyCode)&&(function(e){let t,r=[];localStorage.getItem("projectList")&&(t=localStorage.getItem("projectList"),r=JSON.parse(t)),r.push(e),localStorage.setItem(`${e}`,JSON.stringify([])),localStorage.setItem("projectList",JSON.stringify(r))}(o.value),o.value="",v())}))})(),m(),v()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,